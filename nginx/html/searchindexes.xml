<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>CommonDialogSmall</title><url>/post/element-ui/commondialogsmall/</url><categories/><tags/><content type="html"><![CDATA[对话框的显示/隐藏，及相关配置 采用 provide / inject 的方式触发事件【子/孙组件接收父组件注入】
目录结构 . . ├── App.vue ├── main.js # 全局配置组件 ├── components │ ├── Common │ │ ├── CommonDialogBig # 大弹窗组件 │ │ │ └── index.vue │ │ ├── CommonDialogMedium # 中弹窗组件 │ │ │ └── index.vue │ │ ├── CommonDialogSmall # 小弹窗组件 │ │ │ └── index.vue └── views └── exampleCommon ├── components │ ├── NewAndEditBig.vue # 大弹窗组件使用 │ ├── NewAndEditMedium.vue # 中弹窗组件使用 │ └── NewAndEditSmall.vue # 小弹窗组件使用 └── index.vue 举个例子 index.vue文件 &lt;template&gt; &lt;div&gt; &lt;NewAndEditSmall/&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import NewAndEditSmall from &#34;./components/NewAndEditSmall.vue&#34;; export default { name: &#34;ExampleCommon&#34;, components: { NewAndEditSmall }, data() { return { // 小弹窗的配置 dialogSmall: { visible: false, // 弹窗显示隐藏 title: &#34;小弹窗&#34;, // 弹窗的标题 // showCancelButton: false, // 是否显示取消按钮 // showConfirmButton: false, // 是否显示确定按钮 // cancelButtonText: &#34;重 置&#34;, // 取消按钮的文本内容 // confirmButtonText: &#34;创 建&#34;, // 确定按钮的文本内容 confirmButtonLoading: false, // 确定按钮的loading }, }; }, provide() { return { dialogSmallAttributes: this.dialogSmall, }; }, }; &lt;/script&gt; NewAndEditSmall.vue 子组件
这里直接使用 &lt;CommonDialogMedium&gt; 组件是因为在 main.js 已经引入
&lt;template&gt; &lt;CommonDialogSmall @confirm=&#34;commonDialogConfirm&#34; @cancel=&#34;commonDialogCancel&#34;&gt; &lt;div class=&#34;flex-x-start&#34;&gt; &lt;el-image style=&#34;width: 18px; height: 18px&#34; :src=&#34;require(&#39;@/assets/icon/warning2x.png&#39;)&#34; fit&gt;&lt;/el-image&gt; &lt;span class=&#34;deletetip&#34;&gt;{{ tipsContent }}&lt;/span&gt; &lt;/div&gt; &lt;/CommonDialogSmall&gt; &lt;/template&gt; &lt;script&gt; export default { name: &#34;NewAndEditSmall&#34;, inject: [&#34;dialogSmallAttributes&#34;], props: {}, data() { return { tipsContent: &#34;此操作将永久删除，是否继续？&#34;, }; }, methods: { /* 小弹窗的取消、确认事件 begin */ commonDialogCancel() { console.log(&#34;小弹窗-子组件取消了&#34;); this.dialogSmallAttributes.visible = false; }, commonDialogConfirm() { console.log(&#34;小弹窗-子组件确认了&#34;); this.dialogSmallAttributes.confirmButtonLoading = true; // 模拟接口请求，给按钮添加loading的效果 setTimeout(() =&gt; { this.dialogSmallAttributes.confirmButtonLoading = false; this.dialogSmallAttributes.visible = false; }, 1000); }, /* 小弹窗的取消、确认事件 end */ }, }; &lt;/script&gt; &lt;style lang=&#34;&#34; scoped&gt;&lt;/style&gt; CommonDialogSmall【小弹窗本身】 孙子组件，只做展示，逻辑部分移交给它的父组件NewAndEditMedium.vue处理】
&lt;template&gt; &lt;el-dialog :visible.sync=&#34;dialogSmallAttributes.visible&#34; :before-close=&#34;handleBeforeClose&#34; width=&#34;480px&#34; class=&#34;asset-form&#34; :title=&#34;title&#34; @close=&#34;handleClose&#34;&gt; &lt;!-- dialog 主要的 --&gt; &lt;slot class=&#34;dialog-main&#34;&gt;main&lt;/slot&gt; &lt;template slot=&#34;footer&#34;&gt; &lt;el-button v-if=&#34;showCancelButton&#34; size=&#34;small&#34; @click=&#34;cancel&#34;&gt;{{ cancelButtonText }}&lt;/el-button&gt; &lt;el-button v-if=&#34;showConfirmButton&#34; size=&#34;small&#34; :loading=&#34;confirmButtonLoading&#34; type=&#34;primary&#34; @click=&#34;confirm&#34;&gt; {{ confirmButtonText }} &lt;/el-button&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/template&gt; &lt;script&gt; /** * @desc: 小弹窗组件。只做展示，逻辑部分移交给它的父组件处理，如：index.vue】 * Options: * title: &#34;标题名称&#34;, // 弹窗的标题，默认值: 标题名称 * showCancelButton: true, // 是否显示取消按钮，默认值: true * showConfirmButton: true, // 是否显示确定按钮，默认值: true * cancelButtonText: &#34;取 消&#34;, // 取消按钮的文本内容，默认值: 取 消 * confirmButtonText: &#34;确 定&#34;, // 确定按钮的文本内容，默认值: 确 定 * confirmButtonLoading: false, // 确定按钮的loading，默认值: false * confirmButtonLoading: false, // 确定按钮的loading-如果配置confirmButtonLoading，则显示loading效果 * Other: * 采用 provide/inject 的方式触发事件【子/孙组件接收了父组件注入】 * @author: zhang lin * @update: 2023-03-13 */ export default { name: &#34;CommonDialogSmall&#34;, inject: [&#34;dialogSmallAttributes&#34;], props: {}, data() { return {}; }, computed: { // 弹窗的标题，默认值: 标题名称 title() { return this.dialogSmallAttributes.title || &#34;标题名称&#34;; }, // 是否显示取消按钮，默认值: true showCancelButton() { const { showCancelButton } = this.dialogSmallAttributes; if (typeof showCancelButton === &#34;boolean&#34; &amp;&amp; !showCancelButton) { return false; } return true; }, // 是否显示确定按钮，默认值: true showConfirmButton() { const { showConfirmButton } = this.dialogSmallAttributes; if (typeof showConfirmButton === &#34;boolean&#34; &amp;&amp; !showConfirmButton) { return false; } return true; }, // 取消按钮的文本内容，默认值: 取 消 cancelButtonText() { return this.dialogSmallAttributes.cancelButtonText || &#34;取 消&#34;; }, // 确定按钮的文本内容，默认值: 确 定 confirmButtonText() { return this.dialogSmallAttributes.confirmButtonText || &#34;确 定&#34;; }, // 确定按钮的loading-如果配置confirmButtonLoading，则显示loading效果 confirmButtonLoading() { return this.dialogSmallAttributes.confirmButtonLoading || false; }, }, methods: { handleBeforeClose() { this.dialogSmallAttributes.visible = false; }, handleClose() {}, cancel() { this.$emit(&#34;cancel&#34;); }, confirm() { this.$emit(&#34;confirm&#34;); }, }, }; &lt;/script&gt; &lt;style lang=&#34;scss&#34; scoped&gt; ::v-deep .el-dialog__footer { padding: 0 24px 24px; } &lt;/style&gt; Attributes 参数 说明 类型 默认值 visible 对话框显示/隐藏 boolean false title 弹窗的标题 string 小弹窗 showCancelButton 是否显示取消按钮 boolean true showConfirmButton 是否显示确定按钮 boolean true cancelButtonText 取消按钮的文本内容 string 取 消 confirmButtonText 确定按钮的文本内容 string 确 定 confirmButtonLoading 确定按钮的loading boolean - ]]></content></entry><entry><title>CommonDialogMedium</title><url>/post/element-ui/commondialogmedium/</url><categories/><tags/><content type="html"><![CDATA[对话框的显示/隐藏，及相关配置 采用 provide / inject 的方式触发事件【子/孙组件接收父组件注入】
目录结构 . . ├── App.vue ├── main.js # 全局配置组件 ├── components │ ├── Common │ │ ├── CommonDialogBig # 大弹窗组件 │ │ │ └── index.vue │ │ ├── CommonDialogMedium # 中弹窗组件 │ │ │ └── index.vue │ │ ├── CommonDialogSmall # 小弹窗组件 │ │ │ └── index.vue └── views └── exampleCommon ├── components │ ├── NewAndEditBig.vue # 大弹窗组件使用 │ ├── NewAndEditMedium.vue # 中弹窗组件使用 │ └── NewAndEditSmall.vue # 小弹窗组件使用 └── index.vue 举个例子 index.vue文件 &lt;template&gt; &lt;div&gt; &lt;NewAndEditMedium/&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import NewAndEditMedium from &#34;./components/NewAndEditMedium.vue&#34;; export default { name: &#34;ExampleCommon&#34;, components: { NewAndEditMedium }, data() { return { // 中弹窗的配置 dialogMedium: { visible: false, // 弹窗显示隐藏 title: &#34;中弹窗&#34;, // 弹窗的标题 // showCancelButton: false, // 是否显示取消按钮 // showConfirmButton: false, // 是否显示确定按钮 // cancelButtonText: &#34;重 置&#34;, // 取消按钮的文本内容 // confirmButtonText: &#34;创 建&#34;, // 确定按钮的文本内容 confirmButtonLoading: false, // 确定按钮的loading }, }; }, provide() { return { dialogMediumAttributes: this.dialogMedium, }; }, }; &lt;/script&gt; NewAndEditMedium.vue 子组件
这里直接使用 &lt;CommonDialogMedium&gt; 组件是因为在 main.js 已经引入
&lt;template&gt; &lt;CommonDialogMedium @confirm=&#34;commonDialogConfirm&#34; @cancel=&#34;commonDialogCancel&#34;&gt; &lt;div&gt;中弹窗&lt;/div&gt; &lt;/CommonDialogMedium&gt; &lt;/template&gt; &lt;script&gt; export default { name: &#34;NewAndEditMedium&#34;, inject: [&#34;dialogMediumAttributes&#34;], props: {}, data() { return {}; }, methods: { /* 中弹窗的取消、确认事件 begin */ commonDialogCancel() { console.log(&#34;中弹窗-子组件取消了&#34;); this.dialogMediumAttributes.visible = false; }, commonDialogConfirm() { console.log(&#34;中弹窗-子组件确认了&#34;); this.dialogMediumAttributes.confirmButtonLoading = true; // 模拟接口请求，给按钮添加loading的效果 setTimeout(() =&gt; { this.dialogMediumAttributes.confirmButtonLoading = false; this.dialogMediumAttributes.visible = false; }, 1000); }, /* 中弹窗的取消、确认事件 end */ }, }; &lt;/script&gt; &lt;style lang=&#34;&#34; scoped&gt;&lt;/style&gt; CommonDialogMedium【中弹窗本身】 孙子组件，只做展示，逻辑部分移交给它的父组件NewAndEditMedium.vue处理】
&lt;template&gt; &lt;el-dialog :visible.sync=&#34;dialogMediumAttributes.visible&#34; :before-close=&#34;handleBeforeClose&#34; width=&#34;800px&#34; class=&#34;asset-form&#34; :title=&#34;title&#34; @close=&#34;handleClose&#34;&gt; &lt;!-- dialog 主要的 --&gt; &lt;slot class=&#34;dialog-main&#34;&gt;main&lt;/slot&gt; &lt;template slot=&#34;footer&#34;&gt; &lt;el-button v-if=&#34;showCancelButton&#34; size=&#34;small&#34; @click=&#34;cancel&#34;&gt;{{ cancelButtonText }}&lt;/el-button&gt; &lt;el-button v-if=&#34;showConfirmButton&#34; size=&#34;small&#34; :loading=&#34;confirmButtonLoading&#34; type=&#34;primary&#34; @click=&#34;confirm&#34;&gt; {{ confirmButtonText }} &lt;/el-button&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/template&gt; &lt;script&gt; /** * @desc: 中弹窗组件。只做展示，逻辑部分移交给它的父组件处理，如：NewAndEditMedium.vue】 * Options: * title: &#34;标题名称&#34;, // 弹窗的标题，默认值: 标题名称 * showCancelButton: true, // 是否显示取消按钮，默认值: true * showConfirmButton: true, // 是否显示确定按钮，默认值: true * cancelButtonText: &#34;取 消&#34;, // 取消按钮的文本内容，默认值: 取 消 * confirmButtonText: &#34;确 定&#34;, // 确定按钮的文本内容，默认值: 确 定 * confirmButtonLoading: false, // 确定按钮的loading-如果配置confirmButtonLoading，则显示loading效果 * Other: * 采用 provide/inject 的方式触发事件【子/孙组件接收了父组件注入】 * @author: zhang lin * @update: 2023-03-13 */ export default { name: &#34;CommonDialogMedium&#34;, inject: [&#34;dialogMediumAttributes&#34;], props: {}, data() { return {}; }, computed: { // 弹窗的标题，默认值: 标题名称 title() { return this.dialogMediumAttributes.title || &#34;标题名称&#34;; }, // 是否显示取消按钮，默认值: true showCancelButton() { const { showCancelButton } = this.dialogMediumAttributes; if (typeof showCancelButton === &#34;boolean&#34; &amp;&amp; !showCancelButton) { return false; } return true; }, // 是否显示确定按钮，默认值: true showConfirmButton() { const { showConfirmButton } = this.dialogMediumAttributes; if (typeof showConfirmButton === &#34;boolean&#34; &amp;&amp; !showConfirmButton) { return false; } return true; }, // 取消按钮的文本内容，默认值: 取 消 cancelButtonText() { return this.dialogMediumAttributes.cancelButtonText || &#34;取 消&#34;; }, // 确定按钮的文本内容，默认值: 确 定 confirmButtonText() { return this.dialogMediumAttributes.confirmButtonText || &#34;确 定&#34;; }, // 确定按钮的loading-如果配置confirmButtonLoading，则显示loading效果 confirmButtonLoading() { return this.dialogMediumAttributes.confirmButtonLoading || false; }, }, methods: { handleBeforeClose() { this.dialogMediumAttributes.visible = false; }, handleClose() {}, cancel() { this.$emit(&#34;cancel&#34;); }, confirm() { this.$emit(&#34;confirm&#34;); }, }, }; &lt;/script&gt; &lt;style lang=&#34;scss&#34; scoped&gt; ::v-deep .el-dialog__footer { padding: 0 24px 24px; } &lt;/style&gt; Attributes 参数 说明 类型 默认值 visible 对话框显示/隐藏 boolean false title 弹窗的标题 string 中弹窗 showCancelButton 是否显示取消按钮 boolean true showConfirmButton 是否显示确定按钮 boolean true cancelButtonText 取消按钮的文本内容 string 取 消 confirmButtonText 确定按钮的文本内容 string 确 定 confirmButtonLoading 确定按钮的loading boolean - ]]></content></entry><entry><title>CommonDialogBig</title><url>/post/element-ui/commondialogbig/</url><categories/><tags/><content type="html"><![CDATA[对话框的显示/隐藏，及相关配置 采用 provide / inject 的方式触发事件【子/孙组件接收父组件注入】
目录结构 . . ├── App.vue ├── main.js # 全局配置组件 ├── components │ ├── Common │ │ ├── CommonDialogBig # 大弹窗组件 │ │ │ └── index.vue │ │ ├── CommonDialogMedium # 中弹窗组件 │ │ │ └── index.vue │ │ ├── CommonDialogSmall # 小弹窗组件 │ │ │ └── index.vue └── views └── exampleCommon ├── components │ ├── NewAndEditBig.vue # 大弹窗组件使用 │ ├── NewAndEditMedium.vue # 中弹窗组件使用 │ └── NewAndEditSmall.vue # 小弹窗组件使用 └── index.vue 举个例子 index.vue文件 &lt;template&gt; &lt;div&gt; &lt;NewAndEditBig/&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; import NewAndEditBig from &#34;./components/NewAndEditBig.vue&#34;; export default { name: &#34;ExampleCommon&#34;, components: { NewAndEditBig }, data() { return { // 大弹窗的配置 dialogBig: { visible: false, // 弹窗显示隐藏 title: &#34;大弹窗&#34;, // 弹窗的标题 // showCancelButton: false, // 是否显示取消按钮 // showConfirmButton: false, // 是否显示确定按钮 // cancelButtonText: &#34;重 置&#34;, // 取消按钮的文本内容 // confirmButtonText: &#34;创 建&#34;, // 确定按钮的文本内容 confirmButtonLoading: false, // 确定按钮的loading }, }; }, provide() { return { dialogBigAttributes: this.dialogBig, }; }, }; &lt;/script&gt; NewAndEditBig.vue 子组件
这里直接使用 &lt;CommonDialogBig&gt; 组件是因为在 main.js 已经引入
&lt;template&gt; &lt;CommonDialogBig @confirm=&#34;commonDialogConfirm&#34; @cancel=&#34;commonDialogCancel&#34;&gt; &lt;div&gt;大弹窗&lt;/div&gt; &lt;/CommonDialogBig&gt; &lt;/template&gt; &lt;script&gt; export default { name: &#34;NewAndEditBig&#34;, inject: [&#34;dialogBigAttributes&#34;], props: {}, data() { return {}; }, methods: { /* 大弹窗的取消、确认事件 begin */ commonDialogCancel() { console.log(&#34;大弹窗-子组件取消了&#34;); this.dialogBigAttributes.visible = false; }, commonDialogConfirm() { console.log(&#34;大弹窗-子组件确认了&#34;); this.dialogBigAttributes.confirmButtonLoading = true; // 模拟接口请求，给按钮添加loading的效果 setTimeout(() =&gt; { this.dialogBigAttributes.confirmButtonLoading = false; this.dialogBigAttributes.visible = false; }, 1000); }, /* 大弹窗的取消、确认事件 end */ }, }; &lt;/script&gt; &lt;style lang=&#34;scss&#34; scoped&gt;&lt;/style&gt; CommonDialogBig【大弹窗本身】 孙子组件，只做展示，逻辑部分移交给它的父组件NewAndEditBig.vue处理】
&lt;template&gt; &lt;el-dialog :visible.sync=&#34;dialogBigAttributes.visible&#34; :before-close=&#34;handleBeforeClose&#34; width=&#34;1040px&#34; class=&#34;asset-form&#34; :title=&#34;title&#34; @close=&#34;handleClose&#34;&gt; &lt;!-- dialog 主要的 --&gt; &lt;slot class=&#34;dialog-main&#34;&gt;main&lt;/slot&gt; &lt;template slot=&#34;footer&#34;&gt; &lt;el-button v-if=&#34;showCancelButton&#34; size=&#34;small&#34; @click=&#34;cancel&#34;&gt;{{ cancelButtonText }}&lt;/el-button&gt; &lt;el-button v-if=&#34;showConfirmButton&#34; size=&#34;small&#34; :loading=&#34;confirmButtonLoading&#34; type=&#34;primary&#34; @click=&#34;confirm&#34;&gt; {{ confirmButtonText }} &lt;/el-button&gt; &lt;/template&gt; &lt;/el-dialog&gt; &lt;/template&gt; &lt;script&gt; /** * @desc: 大弹窗组件。只做展示，逻辑部分移交给它的父组件处理，如：NewAndEditBig.vue】 * Options: * title: &#34;标题名称&#34;, // 弹窗的标题，默认值: 标题名称 * showCancelButton: true, // 是否显示取消按钮，默认值: true * showConfirmButton: true, // 是否显示确定按钮，默认值: true * cancelButtonText: &#34;取 消&#34;, // 取消按钮的文本内容，默认值: 取 消 * confirmButtonText: &#34;确 定&#34;, // 确定按钮的文本内容，默认值: 确 定 * confirmButtonLoading: false, // 确定按钮的loading-如果配置confirmButtonLoading，则显示loading效果 * Other: * 采用 provide/inject 的方式触发事件【子/孙组件接收了父组件注入】 * @author: zhang lin * @update: 2023-03-13 */ export default { name: &#34;CommonDialogBig&#34;, inject: [&#34;dialogBigAttributes&#34;], props: {}, data() { return {}; }, computed:{ // 弹窗的标题，默认值: 标题名称 title(){ return this.dialogBigAttributes.title || &#39;标题名称&#39; }, // 是否显示取消按钮，默认值: true showCancelButton(){ const { showCancelButton } = this.dialogBigAttributes if (typeof showCancelButton === &#34;boolean&#34; &amp;&amp; !showCancelButton) { return false } return true }, // 是否显示确定按钮，默认值: true showConfirmButton(){ const { showConfirmButton } = this.dialogBigAttributes if (typeof showConfirmButton === &#34;boolean&#34; &amp;&amp; !showConfirmButton) { return false } return true }, // 取消按钮的文本内容，默认值: 取 消 cancelButtonText(){ return this.dialogBigAttributes.cancelButtonText || &#34;取 消&#34; }, // 确定按钮的文本内容，默认值: 确 定 confirmButtonText(){ return this.dialogBigAttributes.confirmButtonText || &#34;确 定&#34; }, // 确定按钮的loading-如果配置confirmButtonLoading，则显示loading效果 confirmButtonLoading(){ return this.dialogBigAttributes.confirmButtonLoading || false } }, methods: { handleBeforeClose() { this.dialogBigAttributes.visible = false; }, handleClose() {}, cancel() { this.$emit(&#34;cancel&#34;); }, confirm() { this.$emit(&#34;confirm&#34;); }, }, }; &lt;/script&gt; &lt;style lang=&#34;scss&#34; scoped&gt; ::v-deep .el-dialog__footer { padding: 0 24px 24px; } &lt;/style&gt; Attributes 参数 说明 类型 默认值 visible 对话框显示/隐藏 boolean false title 弹窗的标题 string 大弹窗 showCancelButton 是否显示取消按钮 boolean true showConfirmButton 是否显示确定按钮 boolean true cancelButtonText 取消按钮的文本内容 string 取 消 confirmButtonText 确定按钮的文本内容 string 确 定 confirmButtonLoading 确定按钮的loading boolean - ]]></content></entry></search>